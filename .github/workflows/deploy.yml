name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
        
    - name: Create .env content
      run: |
        cat > env_content.txt << 'EOF'
        APP_ENV=${{ vars.APP_ENV || 'production' }}
        APP_DEBUG=${{ vars.APP_DEBUG || 'false' }}
        APP_URL=${{ vars.APP_URL || 'localhost' }}
        
        # Wallet
        WALLET_NILE_URL=${{ vars.WALLET_NILE_URL }}
        WALLET_URL=${{ vars.WALLET_URL }}
        WALLET_SYSTEM_ADMIN_ACCESS_ID=${{ secrets.WALLET_SYSTEM_ADMIN_ACCESS_ID }}
        WALLET_SYSTEM_ADMIN_TOKEN=${{ secrets.WALLET_SYSTEM_ADMIN_TOKEN }}
        
        # WALLET GLOBAL
        DB_GLOBAL_DSN=${{ secrets.DB_GLOBAL_DSN }}
        DB_GLOBAL_USER=${{ secrets.DB_GLOBAL_USER }}
        DB_GLOBAL_PASS=${{ secrets.DB_GLOBAL_PASS }}
        
        # WALLET_0
        DB_WALLET_0_DSN=${{ secrets.DB_WALLET_0_DSN }}
        DB_WALLET_0_USER=${{ secrets.DB_WALLET_0_USER }}
        DB_WALLET_0_PASS=${{ secrets.DB_WALLET_0_PASS }}
        
        # WALLET_1
        DB_WALLET_1_DSN=${{ secrets.DB_WALLET_1_DSN }}
        DB_WALLET_1_USER=${{ secrets.DB_WALLET_1_USER }}
        DB_WALLET_1_PASS=${{ secrets.DB_WALLET_1_PASS }}
        
        # REDIS
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT || '6379' }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        REDIS_DB=${{ secrets.REDIS_DB || '0' }}
        
        # ID
        TEST_MERCHANT_IDS=${{ vars.TEST_MERCHANT_IDS }}
        EOF
        
        ENV_CONTENT=$(cat env_content.txt | base64 -w 0)
        echo "ENV_CONTENT_B64=$ENV_CONTENT" >> $GITHUB_ENV

    - name: Deploy via SSM Run Command
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids i-0f995676e4a497cd9 \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=["/opt/deployment/git-deploy.sh ${{ github.repository }} ${{ github.sha }} '${{ env.ENV_CONTENT_B64 }}'"]' \
          --query 'Command.CommandId' \
          --output text)
        
        echo "SSM Command ID: $COMMAND_ID"
        echo "Deploying commit: ${{ github.sha }}"
        
        # Wait for command completion
        while true; do
          STATUS=$(aws ssm get-command-invocation \
            --command-id $COMMAND_ID \
            --instance-id i-0f995676e4a497cd9 \
            --query 'Status' \
            --output text 2>/dev/null || echo "InProgress")
          
          echo "Deployment status: $STATUS"
          
          if [ "$STATUS" = "Success" ]; then
            echo "Deployment completed successfully"
            
            # Get command output
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id i-0f995676e4a497cd9 \
              --query 'StandardOutputContent' \
              --output text
            break
          elif [ "$STATUS" = "Failed" ]; then
            echo "Deployment failed"
            aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id i-0f995676e4a497cd9 \
              --query 'StandardErrorContent' \
              --output text
            exit 1
          elif [ "$STATUS" = "TimedOut" ]; then
            echo "Deployment timed out"
            exit 1
          fi
          
          sleep 10
        done