name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: pdo, json, curl, sockets
        
    - name: Install Composer dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Create .env file
      run: |
        cat > .env << EOF
        APP_URL=${{ vars.APP_URL }}
        APP_ENV=${{ vars.APP_ENV }}
        APP_DEBUG=${{ vars.APP_DEBUG }}
        
        # Wallet
        WALLET_NILE_URL=${{ vars.WALLET_NILE_URL }}
        WALLET_URL=${{ vars.WALLET_URL }}
        WALLET_SYSTEM_ADMIN_ACCESS_ID=${{ secrets.WALLET_SYSTEM_ADMIN_ACCESS_ID }}
        WALLET_SYSTEM_ADMIN_TOKEN=${{ secrets.WALLET_SYSTEM_ADMIN_TOKEN }}
        
        # WALLET GLOBAL
        DB_GLOBAL_DSN=${{ secrets.DB_GLOBAL_DSN }}
        DB_GLOBAL_USER=${{ secrets.DB_GLOBAL_USER }}
        DB_GLOBAL_PASS=${{ secrets.DB_GLOBAL_PASS }}
        
        # WALLET_1
        DB_WALLET_0_DSN=${{ secrets.DB_WALLET_0_DSN }}
        DB_WALLET_0_USER=${{ secrets.DB_WALLET_0_USER }}
        DB_WALLET_0_PASS=${{ secrets.DB_WALLET_0_PASS }}
        
        # WALLET_2
        DB_WALLET_1_DSN=${{ secrets.DB_WALLET_1_DSN }}
        DB_WALLET_1_USER=${{ secrets.DB_WALLET_1_USER }}
        DB_WALLET_1_PASS=${{ secrets.DB_WALLET_1_PASS }}
        
        # REDIS
        REDIS_HOST=${{ secrets.REDIS_HOST }}
        REDIS_PORT=${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        REDIS_DB=${{ secrets.REDIS_DB }}
        EOF
        
        # ID
        TEST_MERCHANT_IDS=${{ vars.TEST_MERCHANT_IDS }}

    - name: Create deployment archive
      run: |
        cd ..
        tar -czf deployment.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='storage/logs/*' \
          --exclude='storage/cache/*' \
          $(basename $GITHUB_WORKSPACE)
        mv deployment.tar.gz $GITHUB_WORKSPACE/
          
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Upload deployment to S3
      run: |
        TIMESTAMP=$(date +%s)
        DEPLOYMENT_FILE="wallet-nile-cron-${TIMESTAMP}.tar.gz"
        S3_PATH="s3://${{ secrets.S3_DEPLOYMENT_BUCKET }}/${DEPLOYMENT_FILE}"
        aws s3 cp deployment.tar.gz "$S3_PATH"
        echo "DEPLOYMENT_FILE=${DEPLOYMENT_FILE}" >> $GITHUB_ENV
        
    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.3
      env:
        DEPLOYMENT_FILE: ${{ env.DEPLOYMENT_FILE }}
        S3_BUCKET: ${{ secrets.S3_DEPLOYMENT_BUCKET }}
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: DEPLOYMENT_FILE,S3_BUCKET
        script: |
          # Stop services
          sudo systemctl stop wallet-nile-cron || true
          sudo systemctl stop nginx || true
          sudo systemctl stop php8.3-fpm || true
          
          # Create app directory if it doesn't exist
          sudo mkdir -p /var/www/html
          
          # Backup current deployment
          sudo mv /var/www/html /var/www/html.backup.$(date +%s) || true
          
          # Download and extract new deployment
          cd /tmp
          aws s3 cp s3://${S3_BUCKET}/${DEPLOYMENT_FILE} deployment.tar.gz
          tar -xzf deployment.tar.gz
          sudo mv wallet-nile-cron /var/www/html
          sudo chown -R www-data:www-data /var/www/html
          
          # Create required directories
          sudo mkdir -p /var/www/html/storage/logs
          sudo mkdir -p /var/www/html/storage/cache
          sudo chown -R www-data:www-data /var/www/html/storage
          
          # Configure nginx
          sudo tee /etc/nginx/sites-available/wallet-nile-cron > /dev/null <<EOF
          server {
              listen 80;
              server_name _;
              root /var/www/html/server;
              index index.php;

              location / {
                  try_files \$uri \$uri/ /index.php?\$query_string;
              }

              location ~ \.php$ {
                  fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
                  fastcgi_index index.php;
                  include fastcgi_params;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
              }

              location ~ /\.ht {
                  deny all;
              }
          }
          EOF
          
          # Enable nginx site
          sudo ln -sf /etc/nginx/sites-available/wallet-nile-cron /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test nginx configuration
          sudo nginx -t
          
          # Install/update systemd service
          sudo cp /var/www/html/systemd/cron.service /etc/systemd/system/wallet-nile-cron.service
          sudo systemctl daemon-reload
          sudo systemctl enable wallet-nile-cron
          sudo systemctl enable nginx
          sudo systemctl enable php8.3-fpm
          
          # Start services
          sudo systemctl start php8.3-fpm
          sudo systemctl start nginx
          sudo systemctl start wallet-nile-cron
          
          # Check service status
          sudo systemctl status php8.3-fpm
          sudo systemctl status nginx
          sudo systemctl status wallet-nile-cron
          
          # Cleanup
          rm -f /tmp/deployment.tar.gz